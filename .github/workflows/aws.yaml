name: CI/CD to ECS Fargate
on:
  workflow_run:
    workflows: ["Run Unit Tests"]   # Match the name in your ci.yaml
    types:
      - completed
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: document_portal
  ECS_SERVICE: document-portal-service
  ECS_CLUSTER: document-portal-cluster
  ECS_TASK_DEFINITION: .github/workflows/task_definition.json
  CONTAINER_NAME: document-portal-container

permissions:
  id-token: write
  contents: read

jobs:
  check-status:
    runs-on: ubuntu-latest
    if: ${{github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'}}
    steps:
      - name: CI passed on main branch
        run: echo "CI passed on main branch, proceeding to build and deploy."

  # -------------------------------
  # 1. Build & Push Docker Image
  # -------------------------------
  build-and-push:
    name: Build & Push Docker Image
    needs: [check-status]
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  # -------------------------------
  # 2. Deploy to ECS
  # -------------------------------
  deploy:
    name: Deploy to ECS Fargate
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4  # Updated to v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug ECS Resources
        run: |
          echo "Checking if cluster exists..."
          aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} || echo "Cluster not found"
          
          echo "Checking if service exists..."
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} || echo "Service not found"

      - name: Render Task Definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image }}

      - name: Register Task Definition
        id: register-task-def
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.render-task.outputs.task-definition }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-definition-arn=$TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT

      - name: Check if ECS Service Exists
        id: check-service
        run: |
          if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[?status==`ACTIVE`] | [0].serviceName' --output text | grep -q ${{ env.ECS_SERVICE }}; then
            echo "service-exists=true" >> $GITHUB_OUTPUT
            echo "Service exists"
          else
            echo "service-exists=false" >> $GITHUB_OUTPUT
            echo "Service does not exist"
          fi

      - name: Create ECS Service
        if: steps.check-service.outputs.service-exists == 'false'
        run: |
          echo "Creating ECS service..."
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-085ea525dd0f56280,subnet-02afd94f34fa1e491],securityGroups=[sg-12345],assignPublicIp=ENABLED}" \
            --enable-logging
          
          echo "Waiting for service to become stable..."
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}

      - name: Update ECS Service
        if: steps.check-service.outputs.service-exists == 'true'
        run: |
          echo "Updating existing ECS service..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }}
          
          echo "Waiting for service to become stable..."
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}

      - name: Done!
        run: echo "Deployed to ECS Fargate Successfully"